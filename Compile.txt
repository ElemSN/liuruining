#include<iostream>
#include<string>
#include<vector>
using namespace std;

class AbstractFile{
protected:
	string name;
public:
	AbstractFile(string n){
		name = n;
	}
	AbstractFile()
	{
		name = "New File.txt";
	}
	virtual void out() = 0;
};

class File :public AbstractFile{
public:
	File(){}
	File(string n):AbstractFile(n){}
	void out(){
		cout << "File's name:" << name << endl;
	}
};

class Folder: public AbstractFile{
private:
	vector<AbstractFile*> vec;
public:
	Folder(){}
	Folder(string n) :AbstractFile(n){}
	void Add(AbstractFile* pa){
		vec.push_back(pa);
	}
	void out(){
		vector<AbstractFile*>::iterator i;
		for (i = vec.begin(); i != vec.end(); i++){
			(*i)->out();
		}
	}
};

int main(void){
	Folder* root = new Folder("F://");
	File* file1 = new File("11");
	File* file2 = new File("22");
	File* file3 = new File("3.c");
	Folder* cf = new Folder("aa");
	root->Add(file1);
	root->Add(file2);
	root->Add(cf);
	cf->Add(file3);
	root->out();
	system("pause");
	delete root;
	delete file1;
	delete file2;
	delete file3;
	delete cf;
	return 0;
}